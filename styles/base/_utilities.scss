// ------------------
// Utility Classes
// ------------------


.flex {
  display: flex;
  gap: var(--gap, 1rem);
}

.grid {
  display: grid;
  gap: var(--gap, 1rem);
}

.d-block {
    display: block;
}

// * + * targets the element that has a sibling before it
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

.container {
  padding-inline: 2em;
  max-width: 80rem; //1280px
  margin-inline: auto;
}

.grid-container {
  border: 3px solid pink;
  //calculate the max width using media query values. Apply later.
  --max-width: calc(var(--desktop-max) / 2);
  display: grid;

    @include for-desktop-up {
        grid-template-columns: minmax(2rem, 1fr) repeat(2, minmax(0, 40rem)) minmax(2rem, 1fr);
        column-gap: var(--container-gap, 2rem);

        > :first-child {
        grid-column: 2;
        }
        > :last-child {
        grid-column: 3;
        }
    }
}


.flex-container {
    border: 3px solid pink;
    flex-direction: column;


}



// Need to see if the codyhouse one is easier to use
.container-ch {
  width: calc(100% - 2*var(--component-padding, 2em));
  margin-inline: auto;
  max-width: 80rem;
}

.sr-only {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  white-space: nowrap;
}

  // Ensures that the click area of buttons or links is at least 44x44px
.click-target-helper {
  position: relative;
  &::after {
    --click-target-minimum: 44px;
    // take the minimum of two values. When calc is positive it returns 0px.
    // When calc is negative it returns the result from calc since its less than 0
    --inset-by: min(
      0px,
      calc((100% - var(--click-target-minimum)) / 2)
    );

    content: "";
    position: absolute;
    top: var(--inset-by);
    left: var(--inset-by);
    right: var(--inset-by);
    bottom: var(--inset-by);
  }
}


// Color Utilities

.bg-dark { background-color: hsl(var(--clr-dark-hsl) / var(--alpha, 1));}
.bg-accent { background-color: hsl(var(--clr-accent-hsl) / var(--alpha, 1));}
.bg-white { background-color: hsl(var(--clr-white-hsl) / var(--alpha, 1));}

.text-dark { color: hsl(var(--clr-dark-hsl));}
.text-accent { color: hsl(var(--clr-accent-hsl));}
.text-white { color: hsl(var(--clr-white-hsl));}


/* typography */

.ff-serif { font-family: var(--ff-serif); }
.ff-sans-cond { font-family: var(--ff-sans-cond); }
.ff-sans-normal { font-family: var(--ff-sans-normal); }

.letter-spacing-1 { letter-spacing: var(--letter-spacing-large); }
.letter-spacing-2 { letter-spacing: var(--letter-spacing-med); }
.letter-spacing-3 { letter-spacing: var(--letter-spacing-sm); }

.uppercase { text-transform: uppercase; }

.fs-900 { font-size: var(--fs-900); }
.fs-800 { font-size: var(--fs-800); }
.fs-700 { font-size: var(--fs-700); }
.fs-600 { font-size: var(--fs-600); }
.fs-500 { font-size: var(--fs-500); }
.fs-400 { font-size: var(--fs-400); }
.fs-300 { font-size: var(--fs-300); }
.fs-200 { font-size: var(--fs-200); }

.fw-normal { font-weight: var(--fw-normal);}
.fw-bold { font-weight: var(--fw-bold);}

.fs-900,
.fs-800,
.fs-700,
.fs-600 {
    line-height: 1.1;
}
